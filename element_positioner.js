// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.ElementPositioner = (function() {

    function ElementPositioner(selector) {
      if (selector == null) {
        selector = null;
      }
      this.getSelector = __bind(this.getSelector, this);

      this.destroyControlPanel = __bind(this.destroyControlPanel, this);

      this.createControlPanel = __bind(this.createControlPanel, this);

      this.restoreClickBindingsToElements = __bind(this.restoreClickBindingsToElements, this);

      this.removeClickBindingsFromElements = __bind(this.removeClickBindingsFromElements, this);

      this.displayResult = __bind(this.displayResult, this);

      this.initDraggables = __bind(this.initDraggables, this);

      this.deactivate = __bind(this.deactivate, this);

      this.activate = __bind(this.activate, this);

      this.draggable = null;
      this.active = false;
      this.controlPanel = this.createControlPanel(selector);
      if (selector != null) {
        this.activate($(selector));
      }
    }

    ElementPositioner.prototype.activate = function(elements) {
      this.elements = elements;
      this.removeClickBindingsFromElements();
      this.initDraggables();
      this.elements.css({
        cursor: 'move'
      });
      this.active = true;
      return this.displayResult();
    };

    ElementPositioner.prototype.deactivate = function(closePanel) {
      if (closePanel == null) {
        closePanel = false;
      }
      if (closePanel) {
        this.destroyControlPanel();
      }
      this.restoreClickBindingsToElements();
      this.draggable.draggable("destroy");
      this.active = false;
      this.elements.css({
        cursor: 'inherit'
      });
      return this.displayResult();
    };

    ElementPositioner.prototype.initDraggables = function() {
      return this.draggable = this.elements.draggable({
        stack: '*',
        drag: this.displayResult
      });
    };

    ElementPositioner.prototype.displayResult = function() {
      var styleString,
        _this = this;
      styleString = "";
      this.elements.each(function(i, e) {
        var left, selector, top, z;
        e = $(e);
        selector = _this.getSelector(e);
        left = Math.round(parseFloat(e.css('left'), 10));
        top = Math.round(parseFloat(e.css('top'), 10));
        left = parseFloat(e.css('left'), 10);
        top = parseFloat(e.css('top'), 10);
        left = isNaN(left) ? 'auto' : "" + left + "px";
        top = isNaN(top) ? 'auto' : "" + top + "px";
        z = e.css('z-index');
        return styleString += "" + selector + " { left: " + left + "; top: " + top + "; z-index: " + z + "; }\n";
      });
      return this.controlPanel.find('.element-positioner-result').text(styleString);
    };

    ElementPositioner.prototype.removeClickBindingsFromElements = function() {
      return this.elements.unbind('click');
    };

    ElementPositioner.prototype.restoreClickBindingsToElements = function() {
      return this.elements.unbind('click');
    };

    ElementPositioner.prototype.createControlPanel = function(selector) {
      var acceptSelector, handle, panel, previewSelector, result, selectorInput, style,
        _this = this;
      previewSelector = function(e) {
        var target, val;
        target = $(e.target);
        val = target.val();
        $('.element-positioner-selected').removeClass('element-positioner-selected');
        return $(val).addClass('element-positioner-selected');
      };
      acceptSelector = function(e) {
        var target;
        target = $(e.target);
        _this.activate($(target.val()));
        target.remove();
        return $('.element-positioner-selected').removeClass('element-positioner-selected');
      };
      style = $('<style>').attr('type', 'text/css');
      style.html('.element-positioner-selected{ background-color:yellow; outline:2px solid yellow; opacity:.8}');
      $('head').append(style);
      panel = $('<div>').attr('id', 'element-positioner-panel');
      handle = $('<div>').addClass('element-positioner-handle');
      result = $('<textarea>').addClass('element-positioner-result').click(function(e) {
        return $(e.target).select();
      });
      selectorInput = $('<input>').addClass('element-positioner-selector');
      panel.append(handle);
      if (selector == null) {
        selectorInput.change(acceptSelector);
        selectorInput.keyup(previewSelector);
        panel.append(selectorInput);
      }
      panel.append(result);
      panel.draggable({
        handle: handle
      });
      $('body').append(panel);
      return panel;
    };

    ElementPositioner.prototype.destroyControlPanel = function() {
      return this.controlPanel.remove();
    };

    ElementPositioner.prototype.getSelector = function(node) {
      var className, draggableRegex, name, parent, path, realNode, siblings;
      if (node.length !== 1) {
        return false;
      }
      draggableRegex = /(\s)?ui-draggable(-dragging)?/g;
      while (node.length) {
        realNode = node[0];
        name = realNode.localName;
        if (!name) {
          break;
        }
        name = name.toLowerCase();
        className = realNode.className.replace(draggableRegex, '');
        if (realNode.id) {
          return "#" + realNode.id + (path ? '>' + path : '');
        } else if (className) {
          name += "." + (className.split(/\s+/).join('.'));
        }
        parent = node.parent();
        siblings = parent.children(name);
        if (siblings.length > 1) {
          name += ":nth-child(" + (siblings.index(node) + 1) + ")";
        }
        path = "" + name + (path ? '>' + path : '');
        node = parent;
      }
      return path;
    };

    return ElementPositioner;

  })();

}).call(this);
