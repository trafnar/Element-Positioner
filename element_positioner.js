// Generated by CoffeeScript 1.3.3
(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.ElementPositioner = (function() {

    function ElementPositioner(elements) {
      this.elements = elements;
      this.destroyControlPanel = __bind(this.destroyControlPanel, this);

      this.createControlPanel = __bind(this.createControlPanel, this);

      this.restoreClickBindingsToElements = __bind(this.restoreClickBindingsToElements, this);

      this.removeClickBindingsFromElements = __bind(this.removeClickBindingsFromElements, this);

      this.displayResult = __bind(this.displayResult, this);

      this.initDraggables = __bind(this.initDraggables, this);

      this.deactivate = __bind(this.deactivate, this);

      this.activate = __bind(this.activate, this);

      this.draggable = null;
      this.active = false;
    }

    ElementPositioner.prototype.activate = function() {
      this.controlPanel = this.createControlPanel();
      this.removeClickBindingsFromElements();
      this.initDraggables();
      this.elements.css({
        cursor: 'move'
      });
      this.active = true;
      return this.displayResult();
    };

    ElementPositioner.prototype.deactivate = function() {
      this.restoreClickBindingsToElements();
      this.destroyControlPanel();
      this.draggable.draggable("option", "disabled", true);
      this.active = false;
      this.elements.css({
        cursor: 'inherit'
      });
      return this.displayResult();
    };

    ElementPositioner.prototype.initDraggables = function() {
      return this.draggable = this.elements.draggable({
        stack: '*',
        drag: this.displayResult
      });
    };

    ElementPositioner.prototype.displayResult = function() {
      var styleString,
        _this = this;
      styleString = "";
      this.elements.each(function(i, e) {
        var left, selector, top, z;
        e = $(e);
        selector = e.attr('id') != null ? "#" + (e.attr('id')) : e.getSelector();
        left = "" + (parseInt(e.css('left'), 10)) + "px";
        top = "" + (parseInt(e.css('top'), 10)) + "px";
        z = e.css('z-index');
        return styleString += "" + selector + " { left: " + left + "; top: " + top + "; z-index: " + z + "; }\n";
      });
      return this.controlPanel.find('.element-positioner-result').text(styleString);
    };

    ElementPositioner.prototype.removeClickBindingsFromElements = function() {
      return this.elements.unbind('click');
    };

    ElementPositioner.prototype.restoreClickBindingsToElements = function() {};

    ElementPositioner.prototype.createControlPanel = function() {
      var handle, panel, result, selector,
        _this = this;
      panel = $('<div>').attr('id', 'element-positioner-panel');
      handle = $('<div>').addClass('element-positioner-handle');
      result = $('<pre>').addClass('element-positioner-result');
      selector = $('<input>').addClass('element-positioner-selector').change(function(e) {
        var target;
        target = $(e.target);
        _this.deactivate();
        _this.elements = $(target.val());
        return _this.activate();
      });
      panel.append(handle);
      panel.append(selector);
      panel.append(result);
      panel.draggable({
        handle: handle
      });
      $('body').append(panel);
      return panel;
    };

    ElementPositioner.prototype.destroyControlPanel = function() {
      return this.controlPanel.remove();
    };

    return ElementPositioner;

  })();

}).call(this);
